/**
 * @param {number[]} coins
 * @param {number} amount
 * @return {number}
 */
var coinChange = function(coins, amount) {
    // amount를 만족하는 가장 작은 coin의 수를 리턴하라

    // 풀이 1.
    // 11을 만드는 경우의 수는 여럿 존재하고, 그 중에 최소 갯수를 찾으려면..?
    // 우선 가장 큰 숫자를 많이 사용하는 것이 확률이 높겠지
    // 만약, 1,2,3,4,5 로 이루어진, 14라면
    // 그래서 만약에 14라고 하면
    // 14 = 5, 5, 4
    // 가장 큰수로 나누고 나눈 값을 result에 더하기, 나머지를 그 다음 큰 값으로 나누기
    // 나머지가 0이 되면 return, 아니면 -1  리턴..?
    // 만약, 3,5 로 이뤄져있고, 14라면
    // 14 = 5, 5, .. 나머지 4 x
    // let result = 0;

    // coins.sort((a,b) => b - a);

    // for(let i of coins) {
    //     if(amount === 0) return result;
    //     const target = Math.floor(amount / i); 
    //     result += target;
    //     amount -=i * target;
    // }

    // return amount === 0 ? result : -1;

    // 이렇게 풀면, 큰 숫자부터 무조건 사용해야 하기 때문에, 중간 숫자만으로 가능한 경우의 수를 커버 불가능하다

    // 방법2, DP
    const INF = amount + 1;
    const dp = new Array(amount + 1).fill(INF);
    console.log(dp,"dp");
    dp[0] = 0;

    for (let a = 1; a <= amount; a++) {
        for (const c of coins) {
            if (a >= c) dp[a] = Math.min(dp[a], dp[a - c] + 1);
        }
    }
    return dp[amount] === INF ? -1 : dp[amount];

//     | a(금액) | 구성 예(마지막에 쓴 동전 c) | 업데이트 근거(이전값)                                                | dp\[a] |
// | ----: | ----------------- | ----------------------------------------------------------- | -----: |
// |     0 | —                 | 초기값                                                         |      0 |
// |    83 | 83×1 (c=83)       | dp\[83] = min(INF, **dp\[0]+1**)                            |  **1** |
// |   166 | 83×2 (c=83)       | dp\[166] = min(INF, **dp\[83]+1** = 1+1)                    |  **2** |
// |   186 | 186×1 (c=186)     | dp\[186] = min(INF, **dp\[0]+1**)                           |  **1** |
// |   249 | 166+83 (c=83)     | dp\[249] = min(INF, **dp\[166]+1** = 2+1)                   |  **3** |
// |   269 | 186+83 (c=83)     | dp\[269] = min(INF, **dp\[186]+1** = 1+1)                   |  **2** |
// |   332 | 83×4 (c=83)       | dp\[332] = min(INF, **dp\[249]+1** = 3+1)                   |  **4** |
// |   372 | 186×2 (c=186)     | dp\[372] = min(INF, **dp\[186]+1** = 1+1)                   |  **2** |
// |   408 | 408×1 (c=408)     | dp\[408] = min(INF, **dp\[0]+1**)                           |  **1** |
// |   419 | 419×1 (c=419)     | dp\[419] = min(INF, **dp\[0]+1**)                           |  **1** |
// |   502 | 419+83 (c=83)     | dp\[502] = min(INF, **dp\[419]+1** = 1+1)                   |  **2** |
// |   594 | 408+186 (c=186)   | dp\[594] = min(INF, **dp\[408]+1** = 1+1)                   |  **2** |
// |   624 | (진행 중)            | 419→dp\[205], 408→dp\[216], 186→dp\[438], 83→dp\[541] 등을 비교 |      — |
};